import os

# --- Пути ---
# Определяем базовую директорию относительно этого файла
CORE_DIR = os.path.dirname(os.path.abspath(__file__)) # .../backend/app/rag_core
APP_DIR = os.path.dirname(CORE_DIR)                   # .../backend/app
BACKEND_DIR = os.path.dirname(APP_DIR)                # .../backend
PROJECT_ROOT = os.path.dirname(BACKEND_DIR)           # .../ (корень проекта, если backend не в корне)

PERSIST_DIR = os.path.join(BACKEND_DIR, "data") # Директория для хранения индекса (backend/data)
PARAMS_LOG_FILE = os.path.join(PERSIST_DIR, "index_params.log") # Файл лога параметров индекса (backend/data/index_params.log)
DOCUMENTS_DIR = os.path.join(BACKEND_DIR, "data") # Директория с документами (backend/data)

# --- Модели ---
HF_EMBED_MODEL_NAME = "jinaai/jina-embeddings-v3" # Новая модель эмбеддингов
OLLAMA_LLM_MODEL_NAME = "qwen3:latest" # Замените на вашу модель, если нужно
OLLAMA_BASE_URL = "http://localhost:11434"

# Модель для реранкера
RERANKER_MODEL_NAME = 'DiTy/cross-encoder-russian-msmarco'

# --- Параметры RAG ---
# Количество изначальных кандидатов для ретривера
INITIAL_RETRIEVAL_TOP_K = 60
# <<< Новый параметр: Количество кандидатов для поиска С ФИЛЬТРАМИ >>>
FILTERED_RETRIEVAL_TOP_K = 15 # Должно быть <= INITIAL_RETRIEVAL_TOP_K

# --- Параметры гибридного поиска ---
BM25_TOP_K = 15  # Количество кандидатов от BM25
GRAPH_RETRIEVAL_TOP_K = 10  # Количество кандидатов от графового поиска

# Количество узлов после реранкинга для передачи в LLM
RERANKER_TOP_N = 25 # Рекомендуется <= FILTERED_RETRIEVAL_TOP_K (если фильтры используются) или INITIAL_RETRIEVAL_TOP_K

# --- Параметры парсинга и индексации ---
# Версия парсера (для отслеживания изменений, требующих переиндексации)
METADATA_PARSER_VERSION = "v2_hierarchical_structure"
# Максимальная длина структурного чанка перед вторичным разбиением
MAX_STRUCT_CHUNK_LENGTH = 2500
# Параметры для вторичного разбиения (если структурный чанк слишком длинный)
SECONDARY_CHUNK_SIZE = 812
SECONDARY_CHUNK_OVERLAP = 150
MAX_PDF_PAGES = 1000 # Максимальное количество страниц в PDF для обработки

# --- Параметры LLM ---
LLM_REQUEST_TIMEOUT = 300.0 # Таймаут запроса к LLM в секундах
# Размер контекстного окна LLM (в токенах). Установите в соответствии с моделью (например, qwen3 обычно имеет большие окна, такие как 32k, 64k или даже больше в зависимости от версии).
# Это значение влияет на то, сколько информации (контекстных документов + промпт) можно передать LLM за один раз.
LLM_CONTEXT_WINDOW = 100000 

# --- Параметры Реранкера ---
# Максимальная длина последовательности для реранкера (в токенах). 
# Увеличение может улучшить точность реранжирования за счет анализа большего контекста, 
# но также увеличит потребление памяти и время обработки. Подберите значение, исходя из возможностей вашей модели реранкера и ресурсов.
RERANKER_MAX_LENGTH = 512

# --- Общие параметры ---
LOGGING_LEVEL = "INFO" # Уровень логирования (DEBUG, INFO, WARNING, ERROR, CRITICAL)


# --- Справочники и карты для определения типов пенсий ---

# Карта ключевых слов для предварительной классификации запросов по типам пенсий
# ЭТУ КАРТУ ПОКА ОСТАВЛЯЕМ, т.к. она используется в extract_graph_data_from_document
# TODO: В будущем рассмотреть перенос этой логики в JSON или более продвинутый механизм NLP
PENSION_KEYWORD_MAP = {
    # --- Страховые пенсии (ФЗ-400) ---
    # retirement_standard
    'страховая пенсия по старости': 'retirement_standard',
    'пенсия по старости общие основания': 'retirement_standard',
    'общеустановленный возраст пенсия': 'retirement_standard',

    # retirement_early
    'досрочная страховая пенсия': 'retirement_early',
    'досрочное назначение пенсии по старости': 'retirement_early',
    'льготная пенсия по старости': 'retirement_early',
    'вредные условия труда пенсия': 'retirement_early',
    'педагогический стаж пенсия': 'retirement_early',
    'медицинский стаж пенсия': 'retirement_early',
    'северный стаж пенсия': 'retirement_early',
    'работа в тяжелых климатических условиях': 'retirement_early',

    # disability_insurance
    'страховая пенсия по инвалидности': 'disability_insurance',
    'инвалидность страховая пенсия': 'disability_insurance',

    # survivors_insurance
    'страховая пенсия по случаю потери кормильца': 'survivors_insurance',
    'пенсия по потере кормильца страховая': 'survivors_insurance',
    'нетрудоспособным членам семьи умершего': 'survivors_insurance',
    'иждивение умершего кормильца': 'survivors_insurance',

    # --- Государственные пенсии (ФЗ-166) ---
    # service_pension_civil_servant
    'пенсия за выслугу лет госслужащим': 'service_pension_civil_servant',
    'государственная служба выслуга лет пенсия': 'service_pension_civil_servant',

    # service_pension_cosmonaut
    'пенсия космонавтам': 'service_pension_cosmonaut',
    'выслуга лет космонавтов': 'service_pension_cosmonaut',

    # state_pension_disability_military_conscript
    'государственная пенсия по инвалидности военнослужащим по призыву': 'state_pension_disability_military_conscript',
    'инвалидность призывники': 'state_pension_disability_military_conscript',
    'военная травма пенсия': 'state_pension_disability_military_conscript', # может пересекаться с другими военными

    # state_pension_old_age_radiation (old_age_state из pension_types.json)
    'государственная пенсия по старости чернобыльцам': 'state_pension_old_age_radiation',
    'пенсия пострадавшим от радиации': 'state_pension_old_age_radiation',
    'техногенные катастрофы пенсия': 'state_pension_old_age_radiation',

    # disability_state (общий, может быть конкретизирован выше)
    'государственная пенсия по инвалидности': 'disability_state', # Если нет уточнений про категорию

    # --- Социальные пенсии (ФЗ-166) ---
    # social_pension_disability
    'социальная пенсия по инвалидности': 'social_pension_disability',
    'инвалид с детства социальная пенсия': 'social_pension_disability',

    # social_pension_old_age
    'социальная пенсия по старости': 'social_pension_old_age',
    'пенсия малочисленным народам севера': 'social_pension_old_age',
    'нетрудоспособные граждане социальная пенсия': 'social_pension_old_age', # Если достигли возраста

    # social_pension (общий)
    'социальная пенсия': 'social_pension', # Если нет уточнений (по инвалидности, старости, потере кормильца)
}

# Карта для отображения кодов групп инвалидности в читаемый формат
# ОСТАВЛЯЕМ, т.к. используется в _build_prompt_sync
DISABILITY_GROUP_MAP = {
    "1": "I (первая)",
    "2": "II",
    "3": "III",
    "child": "Ребенок-инвалид"
}


# Функция для получения текущих параметров индекса (используется для проверки необходимости переиндексации)
def get_current_index_params():
    return {
        "metadata_parser_version": METADATA_PARSER_VERSION,
        "hf_embed_model_name": HF_EMBED_MODEL_NAME, # Новый ключ для новой модели
        "max_struct_chunk_length": MAX_STRUCT_CHUNK_LENGTH,
        "secondary_chunk_size": SECONDARY_CHUNK_SIZE,
        "secondary_chunk_overlap": SECONDARY_CHUNK_OVERLAP,
    } 

# --- Neo4j Configuration ---
# URI для подключения к Neo4j
NEO4J_URI = "bolt://localhost:7687"
# Имя пользователя Neo4j (по умолчанию neo4j)
NEO4J_USER = "neo4j"
NEO4J_DATABASE = "neo4j"
NEO4J_PASSWORD = "12345678" # <--- ЗАМЕНИТЕ ЭТО НА ВАШ ПАРОЛЬ NEO4J 

# --- Валидация параметров RAG ---
if FILTERED_RETRIEVAL_TOP_K > INITIAL_RETRIEVAL_TOP_K:
    raise ValueError(
        f"FILTERED_RETRIEVAL_TOP_K ({FILTERED_RETRIEVAL_TOP_K}) "
        f"must be <= INITIAL_RETRIEVAL_TOP_K ({INITIAL_RETRIEVAL_TOP_K})"
    )

if RERANKER_TOP_N > INITIAL_RETRIEVAL_TOP_K: # Проверяем относительно INITIAL_RETRIEVAL_TOP_K как максимального количества
    # Более строгая проверка RERANKER_TOP_N <= FILTERED_RETRIEVAL_TOP_K может быть добавлена,
    # но только если FILTERED_RETRIEVAL_TOP_K всегда используется или его значение по умолчанию адекватно.
    # Пока что, убедимся что RERANKER_TOP_N не больше, чем максимально возможное количество извлеченных документов.
    raise ValueError(
        f"RERANKER_TOP_N ({RERANKER_TOP_N}) "
        f"must be <= INITIAL_RETRIEVAL_TOP_K ({INITIAL_RETRIEVAL_TOP_K}) for safety, ideally <= FILTERED_RETRIEVAL_TOP_K if filters are applied."
    )


# Мультимодальная LLM для анализа изображений (например, паспортов)
OLLAMA_MULTIMODAL_LLM_MODEL_NAME = "qwen2.5vl:latest" # Убедитесь, что имя правильное для вашей Ollama
# Таймаут для мультимодальной LLM
MULTIMODAL_LLM_REQUEST_TIMEOUT = 9000.0

# --- Промпты для RAG ---

RAG_SYSTEM_PROMPT = """
Вы — Экспертная Система Анализа Пенсионного Законодательства (ЭСАПЗ) Российской Федерации.
Ваша основная задача — провести всесторонний анализ предоставленной информации (контекстные документы, сведения о деле, запрос пользователя) и сформулировать исчерпывающий, юридически корректный и строго структурированный ответ.

ОСНОВНЫЕ ПРИНЦИПЫ РАБОТЫ:
1.  **Точность и Обоснованность**: Все выводы должны базироваться ИСКЛЮЧИТЕЛЬНО на нормативно-правовых актах (НПА), содержащихся в предоставленном КОНТЕКСТЕ.
2.  **Ссылочная Целостность**: ОБЯЗАТЕЛЬНО ссылайтесь на конкретные статьи, пункты и подпункты НПА (с указанием наименования документа, его номера и даты принятия), подтверждающие каждый вывод или утверждение.
3.  **Полнота Контекста**: Если предоставленный КОНТЕКСТ не содержит достаточной информации для однозначного ответа, прямо укажите на это в разделе "Обоснование" и детализируйте в "Перечень недостающих документов/информации".
4.  **Объективность**: Предоставляйте информацию беспристрастно, без личных мнений или интерпретаций, выходящих за рамки анализа НПА.
5.  **Формализм**: Стиль ответа – официальный, точный, безэмоциональный.

СТРОГО ЗАДАННЫЙ ФОРМАТ ОТВЕТА (отклонение недопустимо):

**ВАЖНОЕ ТРЕБОВАНИЕ К ФОРМАТУ: Ваш ответ ДОЛЖЕН ЗАВЕРШАТЬСЯ специальным блоком "ИТОГ:", который содержит финальное заключение о соответствии или несоответствии. Этот блок является ОБЯЗАТЕЛЬНЫМ.**

1.  **Оценка права на пенсию**:
    *   Возможные значения: Да / Нет / Требуется дополнительная информация / Право на данный вид пенсии не предусмотрено законодательством.

2.  **Обоснование**:
    *   Детальное юридическое обоснование сделанной оценки.
    *   Каждый тезис должен быть подкреплен точной ссылкой на НПА из КОНТЕКСТА (например, "согласно п. 1 ч. 2 ст. 8 Федерального закона от 28.12.2013 № 400-ФЗ 'О страховых пенсиях'...").
    *   Если применимо, указать, какие условия выполнены, а какие нет.
    *   При анализе права на пенсию по старости, если возраст является ключевым фактором, укажите год, на который производится расчет возраста, и соответствующий пенсионный возраст согласно **ст. 8 и Приложению 6 ФЗ-400 'О страховых пенсиях'**. Если дата обращения неизвестна, это должно быть отражено в ответе, и вывод о достижении пенсионного возраста должен быть условным.
    *   При оценке страхового стажа и ИПК, указывайте требуемые значения на год обращения (или предполагаемый год, если дата обращения неизвестна, с соответствующей оговоркой), ссылаясь на **ст. 8 и Приложение 3 ФЗ-400 'О страховых пенсиях'** для ИПК.
    *   При оценке права на досрочную пенсию за длительный стаж, ссылайтесь на **ч. 1.2 ст. 8 ФЗ-400 'О страховых пенсиях'**.

3.  **Условия назначения (если применимо и оценка положительная или требует доп. информации)**:
    *   Краткий суммарный перечень ключевых условий (возраст, страховой стаж, ИПК и т.д.) и их статус выполнения (выполнено/не выполнено/требует уточнения) на основе проведенного анализа. **Не дублируйте детальное обоснование из п.2.**

4.  **Необходимые действия / Рекомендации (если применимо)**:
    *   Конкретные шаги, которые необходимо предпринять заявителю (например, донести определенные документы, обратиться в уполномоченный орган с конкретным заявлением).

5.  **Перечень недостающих документов/информации (если оценка "Требуется дополнительная информация" или информация критична для любого другого ответа)**:
    *   Точный список документов или сведений, необходимых для окончательного определения права на пенсию или уточнения обстоятельств дела.
    *   Для каждого пункта указать, какую информацию он должен подтвердить.
    *   Если для оценки права на пенсию критически не хватает данных (например, дата обращения, если она влияет на пенсионный возраст или требования к ИПК/стажу), укажите это здесь.
    *   Если из предоставленной информации следует, что стандартные обязательные документы для данного типа пенсии не были представлены (согласно сведениям о деле), перечислите их.

**ОБЯЗАТЕЛЬНЫЙ ФИНАЛЬНЫЙ БЛОК:**
**ИТОГ: [ЗДЕСЬ ВАШЕ ОДНОЗНАЧНОЕ ЗАКЛЮЧЕНИЕ: СООТВЕТСТВУЕТ / НЕ СООТВЕТСТВУЕТ / ТРЕБУЕТСЯ ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ / ПРАВО НЕ ПРЕДУСМОТРЕНО]**
*(Пример: ИТОГ: СООТВЕТСТВУЕТ)*
*(Пример: ИТОГ: НЕ СООТВЕТСТВУЕТ)*
*(Пример: ИТОГ: ТРЕБУЕТСЯ ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ)*

КАТЕГОРИЧЕСКИ ЗАПРЕЩАЕТСЯ:
*   Предоставлять информацию, отсутствующую в КОНТЕКСТЕ.
*   Формулировать выводы, не основанные на нормах права из КОНТЕКСТА.
*   Давать общие советы, прогнозы или консультации, выходящие за рамки анализа предоставленных документов и норм НПА.
*   Использовать предположения или допущения (например, 'предполагается, что заявитель достиг пенсионного возраста'). Если информация отсутствует, это должно быть явно указано, и выводы должны быть соответствующим образом оговорены.
*   Изменять заданный формат ответа, **ОСОБЕННО ИГНОРИРОВАТЬ ОБЯЗАТЕЛЬНЫЙ ФИНАЛЬНЫЙ БЛОК "ИТОГ:"**.
"""

RAG_USER_INSTRUCTION_TEMPLATE = """
Уважаемый Эксперт ЭСАПЗ,

Направляется на экспертный анализ следующая ситуация для определения права на пенсионное обеспечение и сопутствующих вопросов.

**1. Сведения о деле (Case Information):**
{case_info}

**2. Запрос пользователя / Описание ситуации (User Query / Situation Description):**
{query}

**3. Контекстные документы (Retrieved Contextual Documents):**
[Ниже будут размещены фрагменты нормативно-правовых актов и иных релевантных документов, извлеченных системой]

**ЗАДАНИЕ:**
Проведите всесторонний анализ предоставленной информации в соответствии с системными инструкциями и установленным форматом ответа. Обеспечьте максимальную точность, ссылочную полноту и юридическую корректность.
"""

# Список ключей конфигурации, которые влияют на результат ретривала и должны быть частью ключа кэша
RETRIEVAL_CACHE_CONFIG_KEYS = [
    "INITIAL_RETRIEVAL_TOP_K",
    "FILTERED_RETRIEVAL_TOP_K",
    "BM25_TOP_K",             # Новый параметр для кэширования
    "GRAPH_RETRIEVAL_TOP_K",  # Новый параметр для кэширования
    "RERANKER_TOP_N",
    "HF_EMBED_MODEL_NAME", # Модель эмбеддингов влияет
    "RERANKER_MODEL_NAME", # Модель реранкера влияет
    # PENSION_TYPE_MAP, PENSION_KEYWORD_MAP, PENSION_TYPE_FILTERS - словари, они сериализуемы
    # и влияют на логику фильтрации, поэтому их стоит включить, если они используются в _apply_filters_sync
    # Однако, PENSION_TYPE_FILTERS может быть большим. Если он не меняется часто,
    # можно его не включать в ключ кэша для производительности, но тогда изменения в нем не инвалидируют кэш.
    "PENSION_KEYWORD_MAP",
    # METADATA_PARSER_VERSION и другие параметры индексации влияют на сам индекс, 
    # а не на запрос к нему, поэтому их не нужно включать в ключ кэша ретривала.
]